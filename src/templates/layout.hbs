<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/assets/styles.css">
    <link rel="stylesheet" href="/assets/styles/prism.css">
    <style>
        .file-tree ul {
            list-style-type: none;
            padding-left: 1.2rem;
        }

        .file-tree li {
            margin: 0.2rem 0;
            position: relative;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-tree .directory::before {
            content: "â–¶";
            margin-right: 0.3rem;
        }

        .file-tree .directory.open::before {
            content: "â–¼";
        }

        .file-tree .collapsed {
            display: none;
        }
        #time {
            position: absolute;
            bottom: 10px;
            left: 10px;
            font-size: 0.8rem;
            color: var(--secondary-color);
        }

        .code-block-wrapper {
            position: relative;
        }

        .copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 4px 8px;
            background-color: #2d2d2d;
            color: #ffffff;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .copy-button:hover {
            opacity: 1;
        }

        .copy-button[data-copy-state="copied"] {
            background-color: #2D2D2D;
        }
    </style>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fileTreeData = JSON.parse('{{{file_tree}}}');
        initializeFileTree(fileTreeData);
        initializeClock();
        initializeCopyButton();
    });

    function initializeFileTree(fileTreeData) {
        const fileTreeElement = document.getElementById('file-tree');
        if (!fileTreeElement) return;

        // Load expanded state from localStorage (or initialize an empty object)
        const expandedStateKey = 'fileTreeExpandedState';
        const expandedState = new Map(JSON.parse(localStorage.getItem(expandedStateKey)) || []);

        // Save expanded state to localStorage whenever it changes
        function saveExpandedState() {
            localStorage.setItem(expandedStateKey, JSON.stringify([...expandedState]));
        }

        function renderFileTreeNode(node, path = '') {
            const list = document.createElement('ul');
            const item = document.createElement('li');
            item.textContent = node.name.replace(".md", "");
            item.classList.add(node.type);
            list.appendChild(item);

            const currentPath = path ? `${path}/${node.name}` : node.name;

            if (node.type === 'directory' && node.children && node.children.length > 0) {
                const childList = document.createElement('ul');
                // Check if this directory should be expanded based on saved state
                const isExpanded = expandedState.get(currentPath) || false;
                if (isExpanded) {
                    item.classList.add('open');
                } else {
                    childList.classList.add('collapsed');
                }

                node.children.forEach(child => {
                    const childNode = renderFileTreeNode(child, currentPath);
                    childList.appendChild(childNode);
                });

                item.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const isOpen = this.classList.toggle('open');
                    childList.classList.toggle('collapsed');
                    // Update and save the state
                    expandedState.set(currentPath, isOpen);
                    saveExpandedState();
                });

                item.appendChild(childList);
            } else if (node.type === 'file') {
                item.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const path = node.path.replace(/\.md$/, '.html');
                    window.location.href = '/' + path;
                });
            }

            return item;
        }

        const rootList = document.createElement('ul');
        fileTreeData.forEach(node => {
            rootList.appendChild(renderFileTreeNode(node));
        });

        fileTreeElement.appendChild(rootList);
    }

    function initializeClock() {
        let timeElement = document.getElementById('time');
        if (!timeElement) {
            timeElement = document.createElement('div');
            timeElement.id = 'time';
            document.body.appendChild(timeElement);
        }

        function updateTime() {
            const now = new Date();
            timeElement.textContent = now.toLocaleTimeString('en-US', {hour12: false});
        }

        updateTime();
        setInterval(updateTime, 1000);
    }

    function initializeCopyButton() {
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', () => {
                const codeBlock = button.nextElementSibling;
                const codeElement = codeBlock.querySelector('code');

                if (codeElement) {
                    const textToCopy = codeElement.innerText;

                    navigator.clipboard.writeText(textToCopy).then(() => {
                        button.textContent = 'Copied!';
                        button.dataset.copyState = 'copied';

                        setTimeout(() => {
                            button.textContent = 'Copy';
                            button.dataset.copyState = 'copy';
                        }, 1000);
                    }).catch(err => {
                        console.error('Failed to copy text: ', err);
                        button.textContent = 'Failed!';

                        setTimeout(() => {
                            button.textContent = 'Copy';
                        }, 1000);
                    });
                }
            });
        });
    }
</script>
</head>

<body>
    <aside class="sidebar">
        <h3 class="text-3xl">Navigation</h3>
        <div id="file-tree" class="file-tree"></div>
        <div id="time"></div>
    </aside>

    <main class="main-content">
        <header class="page-header">
            <h1 class="page-title">{{title}}</h1>

            <div class="metadata">
                {{#if date}}
                <div class="metadata-item">
                    <span>ðŸ“…</span>
                    <span>{{date}}</span>
                </div>
                {{/if}}

                {{#if author}}
                <div class="metadata-item">
                    <span>ðŸ‘¤</span>
                    <span>{{author}}</span>
                </div>
                {{/if}}

                {{#if category}}
                <div class="metadata-item">
                    <span>ðŸ“‚</span>
                    <span>{{category}}</span>
                </div>
                {{/if}}

                {{#if status}}
                <div class="metadata-item">
                    <span class="status status-{{status}}">{{status}}</span>
                </div>
                {{/if}}

                {{#if priority}}
                <div class="metadata-item">
                    <span class="priority priority-{{priority}}">{{priority}}</span>
                </div>
                {{/if}}
            </div>

            {{#if tags.length}}
            <div class="tags-list">
                {{#each tags}}
                <span class="tag">{{this}}</span>
                {{/each}}
            </div>
            {{/if}}
        </header>

        <section class="page-content">
            {{{content}}}
        </section>
    </main>
</body>
</html>
