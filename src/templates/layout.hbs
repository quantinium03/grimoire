<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/assets/styles/styles.css">
    <link rel="stylesheet" href="/assets/styles/prism.css">
</head>

<body>
    <div>
        <aside id="sidebar">
            <div>
                <h3><a href="/">{{owner}}</a></h3>
            </div>
            <div id="file-tree" class="file-tree"></div>
            <div id="time"></div>
        </aside>

        <main>
            <header class="page-header">
                <h1>{{title}}</h1>
                <input type="text" id="search-input" placeholder="Search...">
                <div id="search-results"></div>

                <div class="metadata">
                    {{#if date}}
                    <div>
                        <span>ðŸ“…</span>
                        <span>{{date}}</span>
                    </div>
                    {{/if}}

                    {{#if author}}
                    <div>
                        <span>ðŸ‘¤</span>
                        <span>{{author}}</span>
                    </div>
                    {{/if}}

                    {{#if category}}
                    <div>
                        <span>ðŸ“‚</span>
                        <span>{{category}}</span>
                    </div>
                    {{/if}}

                    {{#if status}}
                    <div>
                        <span>{{status}}</span>
                    </div>
                    {{/if}}

                    {{#if priority}}
                    <div>
                        <span>{{priority}}</span>
                    </div>
                    {{/if}}
                </div>

                {{#if tags.length}}
                <div class="tags-list">
                    {{#each tags}}
                    <span>{{this}}</span>
                    {{/each}}
                </div>
                {{/if}}
            </header>

            <section class="page-content">
                {{{content}}}
            </section>
        </main>
    </div>
</body>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOM loaded'); // Debug
        const fileTreeData = JSON.parse('{{{file_tree}}}');
        console.log('File tree data:', fileTreeData);
        initializeFileTree(fileTreeData);
        initializeClock();
        initializeCopyButton();
        lazyLoadVideos();
    });

    function initializeFileTree(fileTreeData) {
        const fileTreeElement = document.getElementById('file-tree');
        if (!fileTreeElement) return;

        const expandedStateKey = 'fileTreeExpandedState';
        const expandedState = new Map(JSON.parse(localStorage.getItem(expandedStateKey)) || []);

        function saveExpandedState() {
            localStorage.setItem(expandedStateKey, JSON.stringify([...expandedState]));
        }

        function renderFileTreeNode(node, path = '') {
            const list = document.createElement('ul');
            const item = document.createElement('li');
            item.classList.add(node.type);
            list.appendChild(item);

            const currentPath = path ? `${path}/${node.name}` : node.name;

            if (node.type === 'directory' && node.children.length > 0) {
                // Create a wrapper div for directory
                const directoryWrapper = document.createElement('div');
                directoryWrapper.style.display = 'flex';
                directoryWrapper.style.alignItems = 'center';

                // Create the arrow element
                const arrow = document.createElement('svg');
                arrow.setAttribute('class', 'directory-arrow');
                arrow.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                arrow.setAttribute('width', '16');
                arrow.setAttribute('height', '16');
                arrow.setAttribute('viewBox', '0 0 24 24');

                // Create the path element inside the SVG
                const path = document.createElement('path');
                path.setAttribute('d', 'M7.293 4.707 14.586 12l-7.293 7.293 1.414 1.414L17.414 12 8.707 3.293 7.293 4.707z');
                path.setAttribute('fill', '#ffffff');

                arrow.appendChild(path);
                directoryWrapper.appendChild(arrow);

                // Create the directory name span
                const directoryName = document.createElement('span');
                directoryName.textContent = node.name.replace(".md", "").replace("_", " ").replace("-", " ");
                directoryWrapper.appendChild(directoryName);

                item.appendChild(directoryWrapper);

                const childList = document.createElement('ul');
                const isExpanded = expandedState.get(currentPath) || false;

                if (isExpanded) {
                    item.classList.add('open');
                } else {
                    childList.classList.add('collapsed');
                }

                node.children.forEach(child => {
                    const childNode = renderFileTreeNode(child, currentPath);
                    childList.appendChild(childNode);
                });

                directoryWrapper.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const parentLi = this.parentNode;
                    const isOpen = parentLi.classList.toggle('open');
                    const childrenUl = parentLi.querySelector('ul');
                    childrenUl.classList.toggle('collapsed');
                    expandedState.set(currentPath, isOpen);
                    saveExpandedState();
                });

                item.appendChild(childList);
            } else if (node.type === 'file') {
                item.textContent = node.name.replace(".md", "");
                item.addEventListener('click', function (e) {
                    e.stopPropagation();
                    const path = node.path.replace(/\.md$/, '.html');
                    window.location.href = '/' + path;
                });
            }

            return item;
        }

        const rootList = document.createElement('ul');
        fileTreeData.forEach(node => {
            rootList.appendChild(renderFileTreeNode(node));
        });

        fileTreeElement.appendChild(rootList);
    }
    function initializeClock() {
        const timeElement = document.getElementById('time');
        if (!timeElement) return;

        function updateClock() {
            const now = new Date();
            timeElement.textContent = now.toLocaleTimeString(); // e.g., "12:34:56 PM"
        }

        updateClock();
        setInterval(updateClock, 1000); // Update every second
    }

    function initializeCopyButton() {
        const codeBlocks = document.querySelectorAll('pre');
        codeBlocks.forEach(block => {
            const button = document.createElement('button');
            button.textContent = 'Copy';
            button.classList.add('copy-button');

            button.addEventListener('click', () => {
                const code = block.querySelector('code')?.textContent || block.textContent;
                navigator.clipboard.writeText(code).then(() => {
                    button.textContent = 'Copied!';
                    setTimeout(() => {
                        button.textContent = 'Copy';
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy:', err);
                    button.textContent = 'Error!';
                    setTimeout(() => {
                        button.textContent = 'Copy';
                    }, 2000);
                });
            });

            block.style.position = 'relative';

            block.appendChild(button);
        });
    }

    function lazyLoadVideos() {
        const videos = document.querySelectorAll('.lazy-video');

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const video = entry.target;
                    const sources = video.querySelectorAll('source');

                    sources.forEach(source => {
                        source.src = source.dataset.src; // Load video source
                    });

                    video.load(); // Start loading the video
                    observer.unobserve(video); // Stop observing once loaded
                }
            });
        });

        videos.forEach(video => observer.observe(video));
    };

    let searchIndex;
    let searchData;

    fetch('/search-index.json')
        .then(response => response.json())
        .then(data => {
            searchData = data;
            searchIndex = lunr(function () {
                this.ref('url');
                this.field('content');

                data.forEach(item => {
                    this.add(item);
                });
            });
        });

    // Handle search input
    document.getElementById('search-input').addEventListener('input', function (e) {
        const query = e.target.value;
        const results = searchIndex.search(query);
        const resultsContainer = document.getElementById('search-results');
        resultsContainer.innerHTML = '';

        if (results.length > 0) {
            results.forEach(result => {
                const item = searchData.find(item => item.url === result.ref);
                const resultElement = document.createElement('div');
                resultElement.innerHTML = `
                    <h3><a href="${item.url}">${item.url}</a></h3>
                    <p>${item.content.substring(0, 150)}...</p>
                `;
                resultsContainer.appendChild(resultElement);
            });
        } else {
            resultsContainer.innerHTML = '<p>No results found.</p>';
        }
    });
</script>

</html>
