<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/assets/styles.css">
    <link rel="stylesheet" href="/assets/styles/prism.css">
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            border: 2px solid #474C61;
        }

        th,
        td {
            border: 1px solid #474C61;
            padding: 0.5rem;
            text-align: left;
        }

        th {
            font-weight: 700;
        }

        pre[class*="language-"] {
            padding-left: 3em;
        }

        .line-number::before {
            content: attr(line);
            display: inline-block;
            width: 2.5em;
            text-align: right;
            padding-right: 0.5em;
            color: #999;
        }

        :root {
            --primary-color: #cdd6f4;
            --secondary-color: #a6adc8;
            --accent-color: #cba6f7;
            --background-color: #1e1e2e;
            --text-color: #cdd6f4;
            --link-color: #89b4fa;
            --border-color: #313244;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: monospace, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--background-color);
            display: grid;
            grid-template-columns: 250px 1fr;
            grid-template-areas: "sidebar main";
            min-height: 100vh;
        }

        .sidebar {
            grid-area: sidebar;
            background-color: #24283b;
            /* Catppuccin base color */
            border-right: 1px solid var(--border-color);
            padding: 1rem;
            position: sticky;
            top: 0;
            height: 100vh;
            overflow-y: auto;
            color: var(--text-color);
        }

        .sidebar h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .main-content {
            grid-area: main;
            padding: 2rem;
            max-width: 900px;
            margin: 0 auto;
        }

        .page-header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .page-title {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .metadata {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            font-size: 0.9rem;
            color: var(--secondary-color);
            margin-bottom: 1rem;
        }

        .metadata-item {
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .tags-list {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .tag {
            background-color: var(--border-color);
            border-radius: 0.3rem;
            padding: 0.2rem 0.5rem;
            font-size: 0.8rem;
        }

        .page-content {
            font-size: 1.1rem;
            line-height: 1.7;
        }

        .page-content h1,
        .page-content h2,
        .page-content h3,
        .page-content h4,
        .page-content h5,
        .page-content h6 {
            margin-top: 1.5rem;
            margin-bottom: 1rem;
            color: var(--primary-color);
        }

        .page-content p {
            margin-bottom: 1.5rem;
        }

        .page-content a {
            color: var(--link-color);
            text-decoration: none;
        }

        .page-content a:hover {
            text-decoration: underline;
        }

        .page-content ul,
        .page-content ol {
            margin-bottom: 1.5rem;
            padding-left: 1.5rem;
        }

        .page-content code {
            background-color: var(--border-color);
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 0.9rem;
        }

        .page-content pre {
            background-color: #2b303f;
            border-radius: 6px;
            padding: 1rem;
            overflow-x: auto;
            margin-bottom: 1.5rem;
        }

        .page-content pre code {
            background: none;
            padding: 0;
        }

        .file-tree ul {
            list-style-type: none;
            padding-left: 1.2rem;
        }

        .file-tree li {
            margin: 0.2rem 0;
            position: relative;
            cursor: pointer;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .file-tree .directory::before {
            content: "▶";
            margin-right: 0.3rem;
        }

        .file-tree .directory.open::before {
            content: "▼";
        }

        .file-tree .collapsed {
            display: none;
        }

        .status,
        .priority {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            border-radius: 0.3rem;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-draft {
            background-color: #fffbdd;
            color: #735c0f;
        }

        .status-inprogress {
            background-color: #def0fd;
            color: #1a5891;
        }

        .status-complete {
            background-color: #dcffe4;
            color: #165c26;
        }

        .priority-low {
            background-color: var(--secondary-color);
            color: #24283b;
        }

        .priority-medium {
            background-color: #ffdfb9;
            color: #a04900;
        }

        .priority-high {
            background-color: #ffdce0;
            color: #86181d;
        }

        #time {
            position: absolute;
            bottom: 10px;
            left: 10px;
            font-size: 0.8rem;
            color: var(--secondary-color);
        }

        .code-block-wrapper {
            position: relative;
        }

        .copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 4px 8px;
            background-color: #2d2d2d;
            color: #ffffff;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .copy-button:hover {
            opacity: 1;
        }

        .copy-button[data-copy-state="copied"] {
            background-color: #2D2D2D;
        }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const fileTreeData = JSON.parse('{{{file_tree}}}');
            initializeFileTree(fileTreeData);
            initializeClock();
            initializeCopyButton();
        });

        function initializeFileTree(fileTreeData) {
            const fileTreeElement = document.getElementById('file-tree');
            if (!fileTreeElement) return;

            // Object to store the expanded state of directories
            const expandedState = new Map();

            function renderFileTreeNode(node, path = '') {
                const list = document.createElement('ul');
                const item = document.createElement('li');
                item.textContent = node.name.replace(".md", "");
                item.classList.add(node.type);
                list.appendChild(item);

                const currentPath = path ? `${path}/${node.name}` : node.name;

                if (node.type === 'directory' && node.children && node.children.length > 0) {
                    const childList = document.createElement('ul');
                    // Only add 'collapsed' class if not previously expanded
                    if (!expandedState.has(currentPath)) {
                        childList.classList.add('collapsed');
                    } else if (expandedState.get(currentPath)) {
                        item.classList.add('open');
                    }

                    node.children.forEach(child => {
                        const childNode = renderFileTreeNode(child, currentPath);
                        childList.appendChild(childNode);
                    });

                    item.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const isOpen = this.classList.toggle('open');
                        childList.classList.toggle('collapsed');
                        // Store the state
                        expandedState.set(currentPath, isOpen);
                    });

                    item.appendChild(childList);
                } else if (node.type === 'file') {
                    item.addEventListener('click', function (e) {
                        e.stopPropagation();
                        const path = node.path.replace(/\.md$/, '.html');
                        window.location.href = '/' + path;
                    });
                }

                return item;
            }

            const rootList = document.createElement('ul');
            fileTreeData.forEach(node => {
                rootList.appendChild(renderFileTreeNode(node));
            });

            fileTreeElement.appendChild(rootList);
        }

        function initializeClock() {
            let timeElement = document.getElementById('time');
            if (!timeElement) {
                timeElement = document.createElement('div');
                timeElement.id = 'time';
                document.body.appendChild(timeElement);
            }

            function updateTime() {
                const now = new Date();
                timeElement.textContent = now.toLocaleTimeString('en-US', {hour12: false});
            }

            updateTime();
            setInterval(updateTime, 1000);
        }

        function initializeCopyButton() {
            document.querySelectorAll('.copy-button').forEach(button => {
                button.addEventListener('click', () => {
                    const codeBlock = button.nextElementSibling;
                    const codeElement = codeBlock.querySelector('code');

                    if (codeElement) {
                        const textToCopy = codeElement.innerText;

                        navigator.clipboard.writeText(textToCopy).then(() => {
                            button.textContent = 'Copied!';
                            button.dataset.copyState = 'copied';

                            setTimeout(() => {
                                button.textContent = 'Copy';
                                button.dataset.copyState = 'copy';
                            }, 1000);
                        }).catch(err => {
                            console.error('Failed to copy text: ', err);
                            button.textContent = 'Failed!';

                            setTimeout(() => {
                                button.textContent = 'Copy';
                            }, 1000);
                        });
                    }
                });
            });
        }
    </script>
</head>

<body>
    <aside class="sidebar">
        <h3 class="text-3xl">Navigation</h3>
        <div id="file-tree" class="file-tree"></div>
        <div id="time"></div>
    </aside>

    <main class="main-content">
        <header class="page-header">
            <h1 class="page-title">{{title}}</h1>

            <div class="metadata">
                {{#if date}}
                <div class="metadata-item">
                    <span>📅</span>
                    <span>{{date}}</span>
                </div>
                {{/if}}

                {{#if author}}
                <div class="metadata-item">
                    <span>👤</span>
                    <span>{{author}}</span>
                </div>
                {{/if}}

                {{#if category}}
                <div class="metadata-item">
                    <span>📂</span>
                    <span>{{category}}</span>
                </div>
                {{/if}}

                {{#if status}}
                <div class="metadata-item">
                    <span class="status status-{{status}}">{{status}}</span>
                </div>
                {{/if}}

                {{#if priority}}
                <div class="metadata-item">
                    <span class="priority priority-{{priority}}">{{priority}}</span>
                </div>
                {{/if}}
            </div>

            {{#if tags.length}}
            <div class="tags-list">
                {{#each tags}}
                <span class="tag">{{this}}</span>
                {{/each}}
            </div>
            {{/if}}
        </header>

        <section class="page-content">
            {{{content}}}
        </section>
    </main>
</body>
</html>
